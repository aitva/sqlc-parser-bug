// Code generated by sqlc. DO NOT EDIT.
// source: counters.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createCounter = `-- name: CreateCounter :one
INSERT INTO counters (
    value
) VALUES (
    $1
) RETURNING id, value
`

func (q *Queries) CreateCounter(ctx context.Context, value []int64) (Counter, error) {
	row := q.db.QueryRowContext(ctx, createCounter, pq.Array(value))
	var i Counter
	err := row.Scan(&i.ID, pq.Array(&i.Value))
	return i, err
}

const getCounter = `-- name: GetCounter :one
SELECT id, value
FROM counters
WHERE id = $1
`

func (q *Queries) GetCounter(ctx context.Context, id uuid.UUID) (Counter, error) {
	row := q.db.QueryRowContext(ctx, getCounter, id)
	var i Counter
	err := row.Scan(&i.ID, pq.Array(&i.Value))
	return i, err
}

const listCounters = `-- name: ListCounters :many
SELECT id, value
FROM counters
`

func (q *Queries) ListCounters(ctx context.Context) ([]Counter, error) {
	rows, err := q.db.QueryContext(ctx, listCounters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Counter
	for rows.Next() {
		var i Counter
		if err := rows.Scan(&i.ID, pq.Array(&i.Value)); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCounter = `-- name: UpdateCounter :exec
UPDATE counters
SET value = $2
WHERE id = $1
`

type UpdateCounterParams struct {
	ID    uuid.UUID
	Value []int64
}

func (q *Queries) UpdateCounter(ctx context.Context, arg UpdateCounterParams) error {
	_, err := q.db.ExecContext(ctx, updateCounter, arg.ID, pq.Array(arg.Value))
	return err
}
